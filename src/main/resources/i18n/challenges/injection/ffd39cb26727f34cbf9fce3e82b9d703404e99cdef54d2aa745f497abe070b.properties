challenge.challengeName = SQL Injection Challenge Two
challenge.description = <p>The protection mechanism for this challenge is to filter the user input, it looks for strings such as OR/AND/spaces/etc. Bypass can occur when using different operators such as &, +,--, || etc.</p><p>Lessons: When dealing with SQLi attacks, filtering user input is not enough, there are so many keywords that needs to be filtered that most of the time hackers find ways to bypass all the filters.</p><p>The only way to prevent SQL Injection attacks is input validation and parametrized queries including prepared statements. The application code should never use the input directly. The developer must sanitize all input, not only web form inputs such as login forms. They must remove potential malicious code elements such as single quotes. It is also a good idea to turn off the visibility of database errors on your production sites. Database errors can be used with SQL Injection to gain information about your database.</p><p><b>Step 1: Train and maintain awareness</b></p><p>To keep your web application safe, everyone involved in building the web application must be aware of the risks associated with SQL Injections. You should provide suitable security training to all your developers, QA staff, DevOps, and SysAdmins.</p><p><b>Step 2: Don&#39;t trust any user input</b></p><p>Treat all user input as untrusted. Any user input that is used in an SQL query introduces a risk of an SQL Injection. Treat input from authenticated and/or internal users the same way that you treat public input.</p><p><b>Step 3: Use whitelists, not blacklists</b></p><p>Don&#39;t filter user input based on blacklists. A clever attacker will almost always find a way to circumvent your blacklist. If possible, verify and filter user input using strict whitelists only.</p><p><b>Step 4: Adopt the latest technologies</b></p><p>Older web development technologies don&#39;t have SQLi protection. Use the latest version of the development environment and language and the latest technologies associated with that environment/language. For example, in PHP use PDO instead of MySQLi.</p><p><b>Step 5: Employ verified mechanisms</b></p><p>Don&#39;t try to build SQLi protection from scratch. Most modern development technologies can offer you mechanisms to protect against SQLi. Use such mechanisms instead of trying to reinvent the wheel. For example, use parameterized queries or stored procedures.</p><p>To complete this challenge, you must exploit the SQL injection flaw in the following form to find the result key.</p>
challenge.hint = Challenge Hint
challenge.hint.description = This is the query you are attempting to inject code into... But your input is been validated by the server before being sent to the interpreter!
challenge.form.pleaseEnter = Please enter the <a>Customer Email</a> of the user that you want to look up
challenge.form.button.value = Get user
sign.loading = Loading
sign.hint = Would you like a hint?
error.occurred = An Error Occurred